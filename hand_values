# functions that determine strength of hand
def has_straight_flush(hand):
    numbers = [number(card) for card in hand]
    suits = [suit(card) for card in hand]
    for a in suits:
        for b in suits:
            if a != b:
                return False
    new_numbers = []
    while numbers:
        new_numbers += [min(numbers)]
        numbers.remove(min(numbers))
    for i in range(len(new_numbers)-1):
        if (new_numbers[i] + 1) != new_numbers[i+1]:
            return False
    return True

def has_four(hand):
    numbers = [number(card) for card in hand]
    for a in numbers:
        for b in numbers:
            if a != b:
                return False
    return True

def has_full_house(hand):
    numbers = [number(card) for card in hand]
    new_numbers = []
    while numbers:
        new_numbers += [min(numbers)]
        numbers.remove(min(numbers))
    if new_numbers[0] == new_numbers[1] == new_numbers[2] and new_numbers[3] == new_numbers[4]:
        return True
    elif new_numbers[0] == new_numbers[1] and new_numbers[2] == new_numbers[3] == new_numbers[4]:
        return True
    return False

def has_flush(hand):
    suits = [suit(card) for card in hand]
    for a in suits:
        for b in suits:
            if a != b:
                return False
    return True

def has_straight(hand):
    numbers = [number(card) for card in hand]
    new_numbers = []
    while numbers:
        new_numbers += [min(numbers)]
        numbers.remove(min(numbers))
    for i in range(len(new_numbers)-1):
        if (new_numbers[i] + 1) != new_numbers[i+1]:
            return False
    return True

def has_three(hand):
    new_numbers = sort(hand)
    if new_numbers[0] == new_numbers[1] == new_numbers[2]:
        return True
    elif new_numbers[1] == new_numbers[2] == new_numbers[3]:
        return True
    elif new_numbers[2] == new_numbers[3] == new_numbers[4]:
        return True
    return False

def has_two_pairs(hand):
    numbers = [number(card) for card in hand]
    new_numbers = []
    while numbers:
        new_numbers += [min(numbers)]
        numbers.remove(min(numbers))
    if new_numbers[0] == new_numbers[1] and new_numbers[2] == new_numbers[3]:
        return True
    elif new_numbers[0] == new_numbers[1] and new_numbers[3] == new_numbers[4]:
        return True
    elif new_numbers[1] == new_numbers[2] and new_numbers[3] == new_numbers[4]:
        return True
    return False

def has_one_pair(hand):
    numbers = [number(card) for card in hand]
    new_numbers = []
    while numbers:
        new_numbers += [min(numbers)]
        numbers.remove(min(numbers))
    if new_numbers[0] == new_numbers[1] or new_numbers[1] == new_numbers[2] or new_numbers[2] == new_numbers[3] or new_numbers[3] == new_numbers[4]:
        return True
    return False

# find_value allows one to compare relative strengths of hands: adding the highest card in the hand settles the "kicker prblem"

def find_value(hand):
    highest = max(sort(hand))
    x = 0
    if has_straight_flush(hand):
        x = 10
    elif has_four(hand):
        x = 9
    elif has_full_house(hand):
        x = 8
    elif has_flush(hand):
        x = 7
    elif has_straight(hand):
        x = 6
    elif has_three(hand):
        x = 5
    elif has_two_pairs(hand):
        x = 4
    elif has_one_pair(hand):
        x = 3
    else:
        x = 2
    return x + (highest/100)
